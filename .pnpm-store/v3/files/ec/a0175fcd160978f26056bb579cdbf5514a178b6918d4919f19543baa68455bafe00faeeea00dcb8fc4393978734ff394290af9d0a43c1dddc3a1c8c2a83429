"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CommandRunnerModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRunnerModule = void 0;
const common_1 = require("@nestjs/common");
const nestjs_discovery_1 = require("@golevelup/nestjs-discovery");
const commander_1 = require("commander");
const inquirer = require("inquirer");
const command_runner_service_1 = require("./command-runner.service");
const constants_1 = require("./constants");
const inquirer_service_1 = require("./inquirer.service");
let CommandRunnerModule = CommandRunnerModule_1 = class CommandRunnerModule {
    static forModule(module, options) {
        return {
            global: true,
            module: CommandRunnerModule_1,
            imports: module ? [module, nestjs_discovery_1.DiscoveryModule] : [nestjs_discovery_1.DiscoveryModule],
            providers: [
                command_runner_service_1.CommandRunnerService,
                inquirer_service_1.InquirerService,
                {
                    provide: constants_1.Commander,
                    useClass: commander_1.Command,
                },
                {
                    provide: constants_1.Inquirer,
                    useValue: inquirer,
                },
                {
                    provide: constants_1.CommanderOptions,
                    useValue: options !== null && options !== void 0 ? options : {},
                },
                {
                    provide: 'InquirerOptions',
                    useValue: this.inquirerOptions,
                },
            ],
            exports: [inquirer_service_1.InquirerService],
        };
    }
};
CommandRunnerModule.inquirerOptions = {
    input: process.stdin,
    output: process.stdout,
};
CommandRunnerModule = CommandRunnerModule_1 = __decorate([
    (0, common_1.Module)({})
], CommandRunnerModule);
exports.CommandRunnerModule = CommandRunnerModule;
//# sourceMappingURL=command-runner.module.js.map